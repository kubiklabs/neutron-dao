{
  "contract_name": "neutron-reserve",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "denom",
      "distribution_contract",
      "distribution_rate",
      "main_dao_address",
      "min_period",
      "security_dao_address",
      "treasury_contract",
      "vesting_denominator"
    ],
    "properties": {
      "denom": {
        "type": "string"
      },
      "distribution_contract": {
        "description": "Address of distribution contract",
        "type": "string"
      },
      "distribution_rate": {
        "description": "Distribution rate (0-1) which goes to distribution contract",
        "allOf": [
          {
            "$ref": "#/definitions/Decimal"
          }
        ]
      },
      "main_dao_address": {
        "type": "string"
      },
      "min_period": {
        "description": "Minimum period between distribution calls",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "security_dao_address": {
        "description": "Address of security DAO contract",
        "type": "string"
      },
      "treasury_contract": {
        "description": "Address of treasury contract",
        "type": "string"
      },
      "vesting_denominator": {
        "description": "Vesting release function denominator",
        "type": "integer",
        "format": "uint128",
        "minimum": 0.0
      }
    },
    "definitions": {
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Transfer the contract's ownership to another account",
        "type": "object",
        "required": [
          "transfer_ownership"
        ],
        "properties": {
          "transfer_ownership": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Distribute pending funds between Bank and Distribution accounts",
        "type": "object",
        "required": [
          "distribute"
        ],
        "properties": {
          "distribute": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "distribution_contract": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "distribution_rate": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "min_period": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "security_dao_address": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "treasury_contract": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "vesting_denominator": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint128",
                "minimum": 0.0
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "pause"
        ],
        "properties": {
          "pause": {
            "type": "object",
            "required": [
              "duration"
            ],
            "properties": {
              "duration": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "unpause"
        ],
        "properties": {
          "unpause": {
            "type": "object"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "The contract's configurations; returns [`ConfigResponse`]",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "stats"
        ],
        "properties": {
          "stats": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "pause_info"
        ],
        "properties": {
          "pause_info": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": [
        "denom",
        "distribution_contract",
        "distribution_rate",
        "main_dao_address",
        "min_period",
        "security_dao_address",
        "treasury_contract",
        "vesting_denominator"
      ],
      "properties": {
        "denom": {
          "type": "string"
        },
        "distribution_contract": {
          "description": "Address of distribution contract, which will receive funds defined but distribution_rate %",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "distribution_rate": {
          "description": "Distribution rate (0-1) which goes to distribution contract",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "main_dao_address": {
          "description": "Address of the main DAO contract",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "min_period": {
          "description": "Minimum period between distribution calls",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "security_dao_address": {
          "description": "Address of the security DAO contract",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "treasury_contract": {
          "description": "Address of treasury contract, which will receive funds defined by 100-distribution_rate %",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "vesting_denominator": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        }
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        }
      }
    },
    "pause_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PauseInfoResponse",
      "description": "Information about if the contract is currently paused.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "paused"
          ],
          "properties": {
            "paused": {
              "type": "object",
              "required": [
                "until_height"
              ],
              "properties": {
                "until_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "unpaused"
          ],
          "properties": {
            "unpaused": {
              "type": "object"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "stats": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "StatsResponse",
      "type": "object",
      "required": [
        "total_distributed",
        "total_processed_burned_coins",
        "total_reserved"
      ],
      "properties": {
        "total_distributed": {
          "$ref": "#/definitions/Uint128"
        },
        "total_processed_burned_coins": {
          "$ref": "#/definitions/Uint128"
        },
        "total_reserved": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
